1.This is called index signature. This represents a key or property in this object.

	const icons:{ [key:string]: Icontype }={
						web:BsGlobe,
						android:FaAndroid
						}
If we declare our object like this we will be able to call it like: 
						icons[web]  ;it will give us BsGlobe
						icons[platform.slug] ;it will give us BsGlobe if the value of 								platform.slug is 'web'



2.This is called generic type parameter.
	const useData=<T>(string:endpoint)=>{
					     const [data,setData]=useState<T[]>([])
					     }
The function calling will be like: useData<Game>('/games')  ;here Game is a interface,we can pass the interface using this generic paramter style. 	



3.We can also use generic type parameter in interfaces.
Example: 
	interface FetchResponse<T>{
				   count:number;
				   results:T[]
				   } 



4.Exporting in a efficient way:
In index.ts file of tasks folder
export {default as TaskList} from "./TaskList";
//aitar mane hocche ./TaskList file theke default je object ta export kora hocche shei object ta amra TaskList name e ai file theke export kortechi.



5.
interface GameQuery {
  genreId?: number; //same thing like this genre: Genre | undefined;
  platformId?: number;
  sortOrder?: string ;
  searchText?: string ;
}

const [gameQuery, setGameQuery] = useState<GameQuery>({} as GameQuery);
  // {} as GameQuery means {genreId:undefined,platformId:undefined,sortOrder:null,searchText:null}


6.To make a button to go to another page using react router dom:
<Link to={""}>
<Logo/>
</Link>

in function use navigate function.

